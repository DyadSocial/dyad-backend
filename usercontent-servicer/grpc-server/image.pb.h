// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto;
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class ImageChunk;
struct ImageChunkDefaultTypeInternal;
extern ImageChunkDefaultTypeInternal _ImageChunk_default_instance_;
class ImageQuery;
struct ImageQueryDefaultTypeInternal;
extern ImageQueryDefaultTypeInternal _ImageQuery_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ack* Arena::CreateMaybeMessage<::Ack>(Arena*);
template<> ::ImageChunk* Arena::CreateMaybeMessage<::ImageChunk>(Arena*);
template<> ::ImageQuery* Arena::CreateMaybeMessage<::ImageQuery>(Arena*);
template<> ::Metadata* Arena::CreateMaybeMessage<::Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ImageChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageChunk) */ {
 public:
  inline ImageChunk() : ImageChunk(nullptr) {}
  ~ImageChunk() override;
  explicit constexpr ImageChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageChunk(const ImageChunk& from);
  ImageChunk(ImageChunk&& from) noexcept
    : ImageChunk() {
    *this = ::std::move(from);
  }

  inline ImageChunk& operator=(const ImageChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageChunk& operator=(ImageChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageChunk& default_instance() {
    return *internal_default_instance();
  }
  enum MetadataOrBytesCase {
    kImageData = 1,
    kSize = 3,
    METADATAORBYTES_NOT_SET = 0,
  };

  static inline const ImageChunk* internal_default_instance() {
    return reinterpret_cast<const ImageChunk*>(
               &_ImageChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageChunk& a, ImageChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageChunk";
  }
  protected:
  explicit ImageChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFieldNumber = 1,
    kSizeFieldNumber = 3,
  };
  // bytes imageData = 1;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagedata();
  PROTOBUF_NODISCARD std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // int64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  void clear_MetadataOrBytes();
  MetadataOrBytesCase MetadataOrBytes_case() const;
  // @@protoc_insertion_point(class_scope:ImageChunk)
 private:
  class _Internal;
  void set_has_imagedata();
  void set_has_size();

  inline bool has_MetadataOrBytes() const;
  inline void clear_has_MetadataOrBytes();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MetadataOrBytesUnion {
    constexpr MetadataOrBytesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
    int64_t size_;
  } MetadataOrBytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit constexpr Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 3,
    kCreatedFieldNumber = 4,
    kSizeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // .google.protobuf.Timestamp created = 4;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // int64 size = 1;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  int64_t size_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class Ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() override;
  explicit constexpr Ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageSizeFieldNumber = 1,
    kImageURLFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // string imageSize = 1;
  void clear_imagesize();
  const std::string& imagesize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagesize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagesize();
  PROTOBUF_NODISCARD std::string* release_imagesize();
  void set_allocated_imagesize(std::string* imagesize);
  private:
  const std::string& _internal_imagesize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagesize(const std::string& value);
  std::string* _internal_mutable_imagesize();
  public:

  // string ImageURL = 3;
  void clear_imageurl();
  const std::string& imageurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imageurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imageurl();
  PROTOBUF_NODISCARD std::string* release_imageurl();
  void set_allocated_imageurl(std::string* imageurl);
  private:
  const std::string& _internal_imageurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imageurl(const std::string& value);
  std::string* _internal_mutable_imageurl();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagesize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageurl_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class ImageQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageQuery) */ {
 public:
  inline ImageQuery() : ImageQuery(nullptr) {}
  ~ImageQuery() override;
  explicit constexpr ImageQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageQuery(const ImageQuery& from);
  ImageQuery(ImageQuery&& from) noexcept
    : ImageQuery() {
    *this = ::std::move(from);
  }

  inline ImageQuery& operator=(const ImageQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageQuery& operator=(ImageQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageQuery* internal_default_instance() {
    return reinterpret_cast<const ImageQuery*>(
               &_ImageQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageQuery& a, ImageQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageQuery";
  }
  protected:
  explicit ImageQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 3,
    kAuthorFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .google.protobuf.Timestamp created = 3;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // int32 author = 1;
  void clear_author();
  int32_t author() const;
  void set_author(int32_t value);
  private:
  int32_t _internal_author() const;
  void _internal_set_author(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ImageQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  int32_t author_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageChunk

// bytes imageData = 1;
inline bool ImageChunk::_internal_has_imagedata() const {
  return MetadataOrBytes_case() == kImageData;
}
inline bool ImageChunk::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void ImageChunk::set_has_imagedata() {
  _oneof_case_[0] = kImageData;
}
inline void ImageChunk::clear_imagedata() {
  if (_internal_has_imagedata()) {
    MetadataOrBytes_.imagedata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_MetadataOrBytes();
  }
}
inline const std::string& ImageChunk::imagedata() const {
  // @@protoc_insertion_point(field_get:ImageChunk.imageData)
  return _internal_imagedata();
}
template <typename ArgT0, typename... ArgT>
inline void ImageChunk::set_imagedata(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_imagedata()) {
    clear_MetadataOrBytes();
    set_has_imagedata();
    MetadataOrBytes_.imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  MetadataOrBytes_.imagedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageChunk.imageData)
}
inline std::string* ImageChunk::mutable_imagedata() {
  std::string* _s = _internal_mutable_imagedata();
  // @@protoc_insertion_point(field_mutable:ImageChunk.imageData)
  return _s;
}
inline const std::string& ImageChunk::_internal_imagedata() const {
  if (_internal_has_imagedata()) {
    return MetadataOrBytes_.imagedata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ImageChunk::_internal_set_imagedata(const std::string& value) {
  if (!_internal_has_imagedata()) {
    clear_MetadataOrBytes();
    set_has_imagedata();
    MetadataOrBytes_.imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  MetadataOrBytes_.imagedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageChunk::_internal_mutable_imagedata() {
  if (!_internal_has_imagedata()) {
    clear_MetadataOrBytes();
    set_has_imagedata();
    MetadataOrBytes_.imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return MetadataOrBytes_.imagedata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageChunk::release_imagedata() {
  // @@protoc_insertion_point(field_release:ImageChunk.imageData)
  if (_internal_has_imagedata()) {
    clear_has_MetadataOrBytes();
    return MetadataOrBytes_.imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ImageChunk::set_allocated_imagedata(std::string* imagedata) {
  if (has_MetadataOrBytes()) {
    clear_MetadataOrBytes();
  }
  if (imagedata != nullptr) {
    set_has_imagedata();
    MetadataOrBytes_.imagedata_.UnsafeSetDefault(imagedata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(imagedata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ImageChunk.imageData)
}

// int64 size = 3;
inline bool ImageChunk::_internal_has_size() const {
  return MetadataOrBytes_case() == kSize;
}
inline bool ImageChunk::has_size() const {
  return _internal_has_size();
}
inline void ImageChunk::set_has_size() {
  _oneof_case_[0] = kSize;
}
inline void ImageChunk::clear_size() {
  if (_internal_has_size()) {
    MetadataOrBytes_.size_ = int64_t{0};
    clear_has_MetadataOrBytes();
  }
}
inline int64_t ImageChunk::_internal_size() const {
  if (_internal_has_size()) {
    return MetadataOrBytes_.size_;
  }
  return int64_t{0};
}
inline void ImageChunk::_internal_set_size(int64_t value) {
  if (!_internal_has_size()) {
    clear_MetadataOrBytes();
    set_has_size();
  }
  MetadataOrBytes_.size_ = value;
}
inline int64_t ImageChunk::size() const {
  // @@protoc_insertion_point(field_get:ImageChunk.size)
  return _internal_size();
}
inline void ImageChunk::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ImageChunk.size)
}

inline bool ImageChunk::has_MetadataOrBytes() const {
  return MetadataOrBytes_case() != METADATAORBYTES_NOT_SET;
}
inline void ImageChunk::clear_has_MetadataOrBytes() {
  _oneof_case_[0] = METADATAORBYTES_NOT_SET;
}
inline ImageChunk::MetadataOrBytesCase ImageChunk::MetadataOrBytes_case() const {
  return ImageChunk::MetadataOrBytesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Metadata

// int64 size = 1;
inline void Metadata::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Metadata::_internal_size() const {
  return size_;
}
inline int64_t Metadata::size() const {
  // @@protoc_insertion_point(field_get:Metadata.size)
  return _internal_size();
}
inline void Metadata::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Metadata::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Metadata.size)
}

// int32 id = 2;
inline void Metadata::clear_id() {
  id_ = 0;
}
inline int32_t Metadata::_internal_id() const {
  return id_;
}
inline int32_t Metadata::id() const {
  // @@protoc_insertion_point(field_get:Metadata.id)
  return _internal_id();
}
inline void Metadata::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Metadata::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Metadata.id)
}

// string author = 3;
inline void Metadata::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Metadata::author() const {
  // @@protoc_insertion_point(field_get:Metadata.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Metadata.author)
}
inline std::string* Metadata::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:Metadata.author)
  return _s;
}
inline const std::string& Metadata::_internal_author() const {
  return author_.Get();
}
inline void Metadata::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Metadata::release_author() {
  // @@protoc_insertion_point(field_release:Metadata.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Metadata::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Metadata.author)
}

// .google.protobuf.Timestamp created = 4;
inline bool Metadata::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool Metadata::has_created() const {
  return _internal_has_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Metadata::_internal_created() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Metadata::created() const {
  // @@protoc_insertion_point(field_get:Metadata.created)
  return _internal_created();
}
inline void Metadata::unsafe_arena_set_allocated_created(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Metadata.created)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::release_created() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:Metadata.created)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_ = p;
  }
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Metadata::mutable_created() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:Metadata.created)
  return _msg;
}
inline void Metadata::set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created));
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:Metadata.created)
}

// -------------------------------------------------------------------

// Ack

// string imageSize = 1;
inline void Ack::clear_imagesize() {
  imagesize_.ClearToEmpty();
}
inline const std::string& Ack::imagesize() const {
  // @@protoc_insertion_point(field_get:Ack.imageSize)
  return _internal_imagesize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ack::set_imagesize(ArgT0&& arg0, ArgT... args) {
 
 imagesize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Ack.imageSize)
}
inline std::string* Ack::mutable_imagesize() {
  std::string* _s = _internal_mutable_imagesize();
  // @@protoc_insertion_point(field_mutable:Ack.imageSize)
  return _s;
}
inline const std::string& Ack::_internal_imagesize() const {
  return imagesize_.Get();
}
inline void Ack::_internal_set_imagesize(const std::string& value) {
  
  imagesize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ack::_internal_mutable_imagesize() {
  
  return imagesize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ack::release_imagesize() {
  // @@protoc_insertion_point(field_release:Ack.imageSize)
  return imagesize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ack::set_allocated_imagesize(std::string* imagesize) {
  if (imagesize != nullptr) {
    
  } else {
    
  }
  imagesize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagesize,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagesize_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagesize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ack.imageSize)
}

// bool success = 2;
inline void Ack::clear_success() {
  success_ = false;
}
inline bool Ack::_internal_success() const {
  return success_;
}
inline bool Ack::success() const {
  // @@protoc_insertion_point(field_get:Ack.success)
  return _internal_success();
}
inline void Ack::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Ack::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Ack.success)
}

// string ImageURL = 3;
inline void Ack::clear_imageurl() {
  imageurl_.ClearToEmpty();
}
inline const std::string& Ack::imageurl() const {
  // @@protoc_insertion_point(field_get:Ack.ImageURL)
  return _internal_imageurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ack::set_imageurl(ArgT0&& arg0, ArgT... args) {
 
 imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Ack.ImageURL)
}
inline std::string* Ack::mutable_imageurl() {
  std::string* _s = _internal_mutable_imageurl();
  // @@protoc_insertion_point(field_mutable:Ack.ImageURL)
  return _s;
}
inline const std::string& Ack::_internal_imageurl() const {
  return imageurl_.Get();
}
inline void Ack::_internal_set_imageurl(const std::string& value) {
  
  imageurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ack::_internal_mutable_imageurl() {
  
  return imageurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ack::release_imageurl() {
  // @@protoc_insertion_point(field_release:Ack.ImageURL)
  return imageurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ack::set_allocated_imageurl(std::string* imageurl) {
  if (imageurl != nullptr) {
    
  } else {
    
  }
  imageurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageurl,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imageurl_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imageurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ack.ImageURL)
}

// -------------------------------------------------------------------

// ImageQuery

// int32 author = 1;
inline void ImageQuery::clear_author() {
  author_ = 0;
}
inline int32_t ImageQuery::_internal_author() const {
  return author_;
}
inline int32_t ImageQuery::author() const {
  // @@protoc_insertion_point(field_get:ImageQuery.author)
  return _internal_author();
}
inline void ImageQuery::_internal_set_author(int32_t value) {
  
  author_ = value;
}
inline void ImageQuery::set_author(int32_t value) {
  _internal_set_author(value);
  // @@protoc_insertion_point(field_set:ImageQuery.author)
}

// int32 id = 2;
inline void ImageQuery::clear_id() {
  id_ = 0;
}
inline int32_t ImageQuery::_internal_id() const {
  return id_;
}
inline int32_t ImageQuery::id() const {
  // @@protoc_insertion_point(field_get:ImageQuery.id)
  return _internal_id();
}
inline void ImageQuery::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ImageQuery::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ImageQuery.id)
}

// .google.protobuf.Timestamp created = 3;
inline bool ImageQuery::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool ImageQuery::has_created() const {
  return _internal_has_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ImageQuery::_internal_created() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ImageQuery::created() const {
  // @@protoc_insertion_point(field_get:ImageQuery.created)
  return _internal_created();
}
inline void ImageQuery::unsafe_arena_set_allocated_created(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ImageQuery.created)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImageQuery::release_created() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImageQuery::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:ImageQuery.created)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImageQuery::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_ = p;
  }
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ImageQuery::mutable_created() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:ImageQuery.created)
  return _msg;
}
inline void ImageQuery::set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created));
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:ImageQuery.created)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_2eproto
