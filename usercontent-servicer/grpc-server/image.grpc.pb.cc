// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image.proto

#include "image.pb.h"
#include "image.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Images_method_names[] = {
  "/Images/UploadImage",
  "/Images/PullImage",
};

std::unique_ptr< Images::Stub> Images::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Images::Stub> stub(new Images::Stub(channel, options));
  return stub;
}

Images::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadImage_(Images_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PullImage_(Images_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::ImageChunk>* Images::Stub::UploadImageRaw(::grpc::ClientContext* context, ::Ack* response) {
  return ::grpc::internal::ClientWriterFactory< ::ImageChunk>::Create(channel_.get(), rpcmethod_UploadImage_, context, response);
}

void Images::Stub::async::UploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::ClientWriteReactor< ::ImageChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ImageChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ImageChunk>* Images::Stub::AsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ImageChunk>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ImageChunk>* Images::Stub::PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ImageChunk>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, false, nullptr);
}

::grpc::ClientReader< ::ImageChunk>* Images::Stub::PullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request) {
  return ::grpc::internal::ClientReaderFactory< ::ImageChunk>::Create(channel_.get(), rpcmethod_PullImage_, context, request);
}

void Images::Stub::async::PullImage(::grpc::ClientContext* context, const ::ImageQuery* request, ::grpc::ClientReadReactor< ::ImageChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ImageChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_PullImage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ImageChunk>* Images::Stub::AsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ImageChunk>::Create(channel_.get(), cq, rpcmethod_PullImage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ImageChunk>* Images::Stub::PrepareAsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ImageChunk>::Create(channel_.get(), cq, rpcmethod_PullImage_, context, request, false, nullptr);
}

Images::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Images_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Images::Service, ::ImageChunk, ::Ack>(
          [](Images::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ImageChunk>* reader,
             ::Ack* resp) {
               return service->UploadImage(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Images_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Images::Service, ::ImageQuery, ::ImageChunk>(
          [](Images::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ImageQuery* req,
             ::grpc::ServerWriter<::ImageChunk>* writer) {
               return service->PullImage(ctx, req, writer);
             }, this)));
}

Images::Service::~Service() {
}

::grpc::Status Images::Service::UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageChunk>* reader, ::Ack* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Images::Service::PullImage(::grpc::ServerContext* context, const ::ImageQuery* request, ::grpc::ServerWriter< ::ImageChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


