// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image.proto
#ifndef GRPC_image_2eproto__INCLUDED
#define GRPC_image_2eproto__INCLUDED

#include "image.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Images final {
 public:
  static constexpr char const* service_full_name() {
    return "Images";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Client-To-Server RPC. Client sends stream to server and an 
    // acknowledgement is received once the image is finished uploading
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ImageChunk>> UploadImage(::grpc::ClientContext* context, ::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ImageChunk>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageChunk>> AsyncUploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageChunk>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageChunk>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ImageChunk>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ImageChunk>> PullImage(::grpc::ClientContext* context, const ::ImageQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ImageChunk>>(PullImageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageChunk>> AsyncPullImage(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageChunk>>(AsyncPullImageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageChunk>> PrepareAsyncPullImage(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImageChunk>>(PrepareAsyncPullImageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Client-To-Server RPC. Client sends stream to server and an 
      // acknowledgement is received once the image is finished uploading
      virtual void UploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::ClientWriteReactor< ::ImageChunk>* reactor) = 0;
      virtual void PullImage(::grpc::ClientContext* context, const ::ImageQuery* request, ::grpc::ClientReadReactor< ::ImageChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::ImageChunk>* UploadImageRaw(::grpc::ClientContext* context, ::Ack* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ImageChunk>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ImageChunk>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ImageChunk>* PullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImageChunk>* AsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImageChunk>* PrepareAsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::ImageChunk>> UploadImage(::grpc::ClientContext* context, ::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ImageChunk>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageChunk>> AsyncUploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageChunk>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageChunk>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ImageChunk>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ImageChunk>> PullImage(::grpc::ClientContext* context, const ::ImageQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ImageChunk>>(PullImageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageChunk>> AsyncPullImage(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageChunk>>(AsyncPullImageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageChunk>> PrepareAsyncPullImage(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImageChunk>>(PrepareAsyncPullImageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadImage(::grpc::ClientContext* context, ::Ack* response, ::grpc::ClientWriteReactor< ::ImageChunk>* reactor) override;
      void PullImage(::grpc::ClientContext* context, const ::ImageQuery* request, ::grpc::ClientReadReactor< ::ImageChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::ImageChunk>* UploadImageRaw(::grpc::ClientContext* context, ::Ack* response) override;
    ::grpc::ClientAsyncWriter< ::ImageChunk>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ImageChunk>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::Ack* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ImageChunk>* PullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request) override;
    ::grpc::ClientAsyncReader< ::ImageChunk>* AsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ImageChunk>* PrepareAsyncPullImageRaw(::grpc::ClientContext* context, const ::ImageQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadImage_;
    const ::grpc::internal::RpcMethod rpcmethod_PullImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Client-To-Server RPC. Client sends stream to server and an 
    // acknowledgement is received once the image is finished uploading
    virtual ::grpc::Status UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::ImageChunk>* reader, ::Ack* response);
    virtual ::grpc::Status PullImage(::grpc::ServerContext* context, const ::ImageQuery* request, ::grpc::ServerWriter< ::ImageChunk>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ImageChunk>* /*reader*/, ::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::Ack, ::ImageChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullImage(::grpc::ServerContext* context, ::ImageQuery* request, ::grpc::ServerAsyncWriter< ::ImageChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadImage<WithAsyncMethod_PullImage<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadImage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::ImageChunk, ::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, ::Ack* response) { return this->UploadImage(context, response); }));
    }
    ~WithCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ImageChunk>* /*reader*/, ::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::ImageChunk>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullImage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ImageQuery, ::ImageChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ImageQuery* request) { return this->PullImage(context, request); }));
    }
    ~WithCallbackMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ImageChunk>* PullImage(
      ::grpc::CallbackServerContext* /*context*/, const ::ImageQuery* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadImage<WithCallbackMethod_PullImage<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ImageChunk>* /*reader*/, ::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ImageChunk>* /*reader*/, ::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadImage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->UploadImage(context, response); }));
    }
    ~WithRawCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ImageChunk>* /*reader*/, ::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullImage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->PullImage(context, request); }));
    }
    ~WithRawCallbackMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PullImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PullImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PullImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ImageQuery, ::ImageChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ImageQuery, ::ImageChunk>* streamer) {
                       return this->StreamedPullImage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PullImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullImage(::grpc::ServerContext* /*context*/, const ::ImageQuery* /*request*/, ::grpc::ServerWriter< ::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPullImage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ImageQuery,::ImageChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PullImage<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_PullImage<Service > StreamedService;
};


#endif  // GRPC_image_2eproto__INCLUDED
